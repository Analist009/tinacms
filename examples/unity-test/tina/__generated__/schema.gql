# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  sidebar(relativePath: String): Sidebar!
  sidebarConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SidebarFilter): SidebarConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
}

input DocumentFilter {
  sidebar: SidebarFilter
  page: PageFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Sidebar | Page | Folder

type SidebarLinksLabel {
  title: String
}

union SidebarLinksPageReference = Page

union SidebarLinksPageChildrenReference = Page

type SidebarLinksPageChildren {
  reference: SidebarLinksPageChildrenReference
}

type SidebarLinksPage {
  reference: SidebarLinksPageReference
  children: [SidebarLinksPageChildren]
}

union SidebarLinks = SidebarLinksLabel | SidebarLinksPage

type Sidebar implements Node & Document {
  title: String!
  version: String
  locale: String
  type: String
  links: [SidebarLinks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input SidebarLinksLabelFilter {
  title: StringFilter
}

input SidebarLinksPageReferenceFilter {
  page: PageFilter
}

input SidebarLinksPageChildrenReferenceFilter {
  page: PageFilter
}

input SidebarLinksPageChildrenFilter {
  reference: SidebarLinksPageChildrenReferenceFilter
}

input SidebarLinksPageFilter {
  reference: SidebarLinksPageReferenceFilter
  children: SidebarLinksPageChildrenFilter
}

input SidebarLinksFilter {
  label: SidebarLinksLabelFilter
  page: SidebarLinksPageFilter
}

input SidebarFilter {
  title: StringFilter
  version: StringFilter
  locale: StringFilter
  type: StringFilter
  links: SidebarLinksFilter
}

type SidebarConnectionEdges {
  cursor: String!
  node: Sidebar
}

type SidebarConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SidebarConnectionEdges]
}

type Page implements Node & Document {
  title: String!
  body: JSON
  slug: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageFilter {
  title: StringFilter
  body: RichTextFilter
  slug: StringFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateSidebar(relativePath: String!, params: SidebarMutation!): Sidebar!
  createSidebar(relativePath: String!, params: SidebarMutation!): Sidebar!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentUpdateMutation {
  sidebar: SidebarMutation
  page: PageMutation
  relativePath: String
}

input DocumentMutation {
  sidebar: SidebarMutation
  page: PageMutation
}

input SidebarLinksLabelMutation {
  title: String
}

input SidebarLinksPageChildrenMutation {
  reference: String
}

input SidebarLinksPageMutation {
  reference: String
  children: [SidebarLinksPageChildrenMutation]
}

input SidebarLinksMutation {
  label: SidebarLinksLabelMutation
  page: SidebarLinksPageMutation
}

input SidebarMutation {
  title: String
  version: String
  locale: String
  type: String
  links: [SidebarLinksMutation]
}

input PageMutation {
  title: String
  body: JSON
  slug: String
}

schema {
  query: Query
  mutation: Mutation
}
