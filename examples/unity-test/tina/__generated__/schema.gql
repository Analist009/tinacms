# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  manual(relativePath: String): Manual!
  manualConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ManualFilter): ManualConnection!
}

input DocumentFilter {
  page: PageFilter
  manual: ManualFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = PageToc | PageLanding | PageManual | PageReference | ManualToc | ManualLanding | ManualManual | ManualReference | Folder

type PageToc implements Node & Document {
  title: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageLanding implements Node & Document {
  title: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageManual implements Node & Document {
  title: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageReference implements Node & Document {
  title: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Page = PageToc | PageLanding | PageManual | PageReference

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageTocFilter {
  title: StringFilter
}

input PageLandingFilter {
  title: StringFilter
}

input PageManualFilter {
  title: StringFilter
}

input PageReferenceFilter {
  title: StringFilter
}

input PageFilter {
  toc: PageTocFilter
  landing: PageLandingFilter
  manual: PageManualFilter
  reference: PageReferenceFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type ManualToc implements Node & Document {
  title: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type ManualLanding implements Node & Document {
  title: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type ManualManual implements Node & Document {
  title: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type ManualReference implements Node & Document {
  title: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Manual = ManualToc | ManualLanding | ManualManual | ManualReference

input ManualTocFilter {
  title: StringFilter
}

input ManualLandingFilter {
  title: StringFilter
}

input ManualManualFilter {
  title: StringFilter
}

input ManualReferenceFilter {
  title: StringFilter
}

input ManualFilter {
  toc: ManualTocFilter
  landing: ManualLandingFilter
  manual: ManualManualFilter
  reference: ManualReferenceFilter
}

type ManualConnectionEdges {
  cursor: String!
  node: Manual
}

type ManualConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ManualConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateManual(relativePath: String!, params: ManualMutation!): Manual!
  createManual(relativePath: String!, params: ManualMutation!): Manual!
}

input DocumentUpdateMutation {
  page: PageMutation
  manual: ManualMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
  manual: ManualMutation
}

input PageTocMutation {
  title: String
}

input PageLandingMutation {
  title: String
}

input PageManualMutation {
  title: String
}

input PageReferenceMutation {
  title: String
}

input PageMutation {
  toc: PageTocMutation
  landing: PageLandingMutation
  manual: PageManualMutation
  reference: PageReferenceMutation
}

input ManualTocMutation {
  title: String
}

input ManualLandingMutation {
  title: String
}

input ManualManualMutation {
  title: String
}

input ManualReferenceMutation {
  title: String
}

input ManualMutation {
  toc: ManualTocMutation
  landing: ManualLandingMutation
  manual: ManualManualMutation
  reference: ManualReferenceMutation
}

schema {
  query: Query
  mutation: Mutation
}
